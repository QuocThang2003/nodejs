
const Tour = require("../models/tour");
const reviewService = require("./reviewService");
const Category = require("../models/category");
class TourService {
    async getAllTours() {
        return await Tour.find().populate("category", "categoryName");
    }
    async searchTours({ tourName }) {
        if (!tourName) {
            throw new Error("Thi·∫øu tham s·ªë tourName");
        }
    
        // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi v√† xu·ªëng d√≤ng (\n, \r)
        tourName = tourName.trim();
    
        console.log("üì© Gi√° tr·ªã tourName sau khi x·ª≠ l√Ω:", tourName);
    
        const filter = {
            tourName: { $regex: tourName, $options: "i" }
        };
    
        console.log("üîç B·ªô l·ªçc t√¨m ki·∫øm:", JSON.stringify(filter, null, 2));
    
        const tours = await Tour.find(filter).collation({ locale: "vi", strength: 1 });
    
        console.log("üìå K·∫øt qu·∫£ t√¨m ki·∫øm:", tours);
    
        return tours.length ? tours : null;
    }
    
    


    async getTourById(id) {
        return await Tour.findById(id).populate("category", "categoryName");
    }

    async createTour(data, file) {
        // Danh s√°ch c√°c tr∆∞·ªùng b·∫Øt bu·ªôc theo schema
        const requiredFields = ["tourName", "price", "quantity", "startDate", "endDate", "category"];
        const missingFields = requiredFields.filter((field) => !data[field] && data[field] !== 0); // Cho ph√©p gi√° tr·ªã 0
        if (missingFields.length > 0) {
            throw new Error(`Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(", ")}`);
        }
    
        // Ki·ªÉm tra category c√≥ t·ªìn t·∫°i kh√¥ng
        const categoryExists = await Category.findById(data.category);
        if (!categoryExists) {
            throw new Error("Danh m·ª•c kh√¥ng t·ªìn t·∫°i!");
        }
    
        // Chuy·ªÉn ƒë·ªïi price v√† quantity t·ª´ string sang number (v√¨ form-data g·ª≠i string)
        const price = Number(data.price);
        const quantity = Number(data.quantity);
    
        // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu sau khi chuy·ªÉn ƒë·ªïi
        if (isNaN(price) || isNaN(quantity)) {
            throw new Error("Price v√† Quantity ph·∫£i l√† s·ªë h·ª£p l·ªá!");
        }
    
        // Ki·ªÉm tra gi√° tr·ªã √¢m
        if (price < 0 || quantity < 0) {
            throw new Error("Price v√† Quantity kh√¥ng ƒë∆∞·ª£c √¢m!");
        }
    
        // Chuy·ªÉn ƒë·ªïi startDate v√† endDate sang Date
        const startDate = new Date(data.startDate);
        const endDate = new Date(data.endDate);
    
        // Ki·ªÉm tra ng√†y h·ª£p l·ªá
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            throw new Error("Ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá!");
        }
        if (endDate <= startDate) {
            throw new Error("Ng√†y k·∫øt th√∫c ph·∫£i l·ªõn h∆°n ng√†y b·∫Øt ƒë·∫ßu!");
        }
    
        // X·ª≠ l√Ω ·∫£nh
        const img = file ? file.filename : null;
    
        // T·∫°o tour m·ªõi v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        const newTour = new Tour({
            tourName: data.tourName,
            description: data.description || "", // Tr∆∞·ªùng kh√¥ng b·∫Øt bu·ªôc
            price: price,
            quantity: quantity,
            startDate: startDate,
            endDate: endDate,
            category: data.category,
            img: img
        });
    
        return await newTour.save();
    }

    async updateTour(id, data, file) {
        if (data.category) {
            const categoryExists = await Category.findById(data.category);
            if (!categoryExists) {
                throw new Error("Danh m·ª•c kh√¥ng t·ªìn t·∫°i!");
            }
        }

        const img = file ? file.filename : data.img;
        return await Tour.findByIdAndUpdate(
            id, 
            { ...data, img }, 
            { new: true }
        ).populate("category", "categoryName");
    }

    async deleteTour(id) {
        return await Tour.findByIdAndDelete(id);
    }
    


// ‚ö° H√†m l·∫•y t·∫•t c·∫£ th√¥ng tin chi ti·∫øt c·ªßa tour (b·ªè description)
    async getAllTourDetail() {
    try {
        const tours = await Tour.find().select("-description");

        // L·∫•y ƒë√°nh gi√° trung b√¨nh c·ªßa t·ª´ng tour
        const toursWithRating = await Promise.all(
            tours.map(async (tour) => {
                const ratingData = await reviewService.getAverageRating(tour._id);
                return {
                    ...tour.toObject(),
                    rating: ratingData || "Ch∆∞a c√≥ ƒë√°nh gi√°", // N·∫øu ch∆∞a c√≥ ƒë√°nh gi√°, hi·ªÉn th·ªã "Ch∆∞a c√≥ ƒë√°nh gi√°"
                };
            })
        );

        return toursWithRating;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch tour:", error);
        throw new Error("L·ªói server khi l·∫•y danh s√°ch tour!");
    }
}
}

module.exports = new TourService();
