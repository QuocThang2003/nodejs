const Booking = require("../models/Booking");
const Review = require("../models/review");
const mongoose = require("mongoose");
exports.getAllReviews = async (tourId) => {
    try {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ `tourId`, tr·∫£ v·ªÅ th√¥ng b√°o "Ch∆∞a c√≥ ƒë√°nh gi√°"
        if (!tourId) {
            return { message: "Tour n√†y ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°." };
        }

        // L·∫•y danh s√°ch ƒë√°nh gi√° theo tourId n·∫øu c√≥
        const reviews = await Review.find({ tourId }) // L·ªçc theo tourId
            .populate("userId", "fullName") // Ch·ªâ l·∫•y t√™n user
            .select("reviewText userId rating tourId") // Ch·ªâ l·∫•y reviewText, userId, rating, v√† tourId
            .sort({ createdAt: -1 });

        if (reviews.length === 0) {
            return { message: "Tour n√†y ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°." }; // N·∫øu kh√¥ng c√≥ ƒë√°nh gi√° cho tour n√†y
        }

        return reviews; // Tr·∫£ v·ªÅ danh s√°ch ƒë√°nh gi√°
    } catch (error) {
        throw new Error("L·ªói server khi l·∫•y danh s√°ch ƒë√°nh gi√°!"); // X·ª≠ l√Ω l·ªói
    }
};


exports.createReview = async (userId, tourId, bookingId, rating, reviewText) => {
    try {
        // Ki·ªÉm tra xem booking c√≥ t·ªìn t·∫°i kh√¥ng
        const booking = await Booking.findOne({ _id: bookingId, userId, tourId, status: "Pending" });
        if (!booking) {
            return { status: 400, data: { error: "B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi thanh to√°n!" } };
        }

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë√°nh gi√° tour n√†y ch∆∞a
        const existingReview = await Review.findOne({ userId, tourId });
        if (existingReview) {
            return { status: 400, data: { error: "B·∫°n ƒë√£ ƒë√°nh gi√° tour n√†y r·ªìi!" } };
        }

        // T·∫°o ƒë√°nh gi√° m·ªõi
        const newReview = new Review({ userId, tourId, bookingId, rating, reviewText });
        await newReview.save();

        return { status: 201, data: { message: "ƒê√°nh gi√° th√†nh c√¥ng!", review: newReview } };
    } catch (error) {
        console.error("üî• L·ªói trong service:", error); // Log l·ªói chi ti·∫øt
        return { status: 500, data: { error: "L·ªói server khi t·∫°o review!", details: error.message } };
    }
};


// ‚ö° Th√™m h√†m t√≠nh rating trung b√¨nh c·ªßa m·ªôt tour
exports.getAverageRating = async (tourId) => {
    try {
        if (!tourId) {
            return { message: "Tour n√†y ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°." };
        }

        console.log("Tour ID nh·∫≠n ƒë∆∞·ª£c:", tourId);

        const objectIdTourId = new mongoose.Types.ObjectId(tourId); // Chuy·ªÉn ƒë·ªïi sang ObjectId

        const result = await Review.aggregate([
            { $match: { tourId: objectIdTourId } }, // L·ªçc theo tourId
            {
                $group: {
                    _id: "$tourId",
                    averageRating: { $avg: "$rating" }, // T√≠nh trung b√¨nh rating
                    totalReviews: { $sum: 1 } // ƒê·∫øm s·ªë l∆∞·ª£ng ƒë√°nh gi√°
                }
            }
        ]);

        if (result.length === 0) {
            return { message: "Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho tour n√†y." };
        }

        return {
            averageRating: result[0].averageRating.toFixed(1), // L√†m tr√≤n 1 ch·ªØ s·ªë
            totalReviews: result[0].totalReviews
        };
    } catch (error) {
        console.log("L·ªói khi t√≠nh to√°n rating trung b√¨nh:", error);
        return { error: "L·ªói server khi t√≠nh to√°n rating trung b√¨nh!" };
    }
};