const Booking = require("../models/Booking");
const Tour = require("../models/tour");
const Payment = require("../models/payment");
const vnPayService = require("./vnpayService");
exports.getAllBookings = async () => {
    try {
        let bookings = await Booking.find()
            .populate({ path: "userId", select: "fullName" }) // L·∫•y t√™n ƒë·∫ßy ƒë·ªß t·ª´ User
            .populate({ path: "tourId", select: "tourName price" }) // L·∫•y tourName t·ª´ Tour
            .lean(); // Chuy·ªÉn d·ªØ li·ªáu th√†nh object thu·∫ßn t√∫y

        // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ
        bookings = bookings.map(booking => ({
            _id: booking._id,
            fullname: booking.userId?.fullName || "Unknown", // L·∫•y fullName
            tourName: booking.tourId?.tourName || "Unknown", // L·∫•y tourName
            price: booking.tourId?.price || 0, // L·∫•y gi√° tour
            total: booking.total,
            status: booking.status,
            bookingDate: booking.bookingDate,
            createdAt: booking.createdAt,
            updatedAt: booking.updatedAt
        }));

        return { status: 200, data: { message: "L·∫•y danh s√°ch ƒë·∫∑t tour th√†nh c√¥ng!", bookings } };
    } catch (error) {
        return { status: 500, data: { error: "L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t tour!" } };
    }
};


exports.getBookingById = async (bookingId) => {
    try {
        let booking = await Booking.findById(bookingId)
            .populate({ path: "userId", select: "fullName" }) // L·∫•y fullName t·ª´ User
            .populate({ path: "tourId", select: "tourName price" }) // L·∫•y tourName t·ª´ Tour
            .lean(); // Chuy·ªÉn th√†nh object thu·∫ßn

        if (!booking) {
            return { status: 404, data: { error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t tour!" } };
        }

        // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu
        booking = {
            _id: booking._id,
            fullname: booking.userId?.fullName || "Unknown", 
            tourName: booking.tourId?.tourName || "Unknown", 
            price: booking.tourId?.price || 0, // L·∫•y gi√° tour
            total: booking.total,
            status: booking.status,
            bookingDate: booking.bookingDate,
            createdAt: booking.createdAt,
            updatedAt: booking.updatedAt
        };

        return { status: 200, data: { message: "L·∫•y th√¥ng tin ƒë∆°n ƒë·∫∑t tour th√†nh c√¥ng!", booking } };
    } catch (error) {
        return { status: 500, data: { error: "L·ªói khi l·∫•y ƒë∆°n ƒë·∫∑t tour!" } };
    }
};

exports.createBooking = async (userId, tourId, quantity) => {
    if (!tourId || !quantity || quantity <= 0) {
        return { status: 400, data: { error: "Th√¥ng tin kh√¥ng h·ª£p l·ªá!" } };
    }

    const tour = await Tour.findById(tourId);
    if (!tour) {
        return { status: 404, data: { error: "Tour kh√¥ng t·ªìn t·∫°i!" } };
    }

    const total = tour.price * quantity;
    
    const newBooking = new Booking({
        userId,
        tourId,
        total
    });

    try {
        const savedBooking = await newBooking.save();

        // T·∫°o orderId duy nh·∫•t
        const orderId = `VN${Date.now()}`;

        // T·∫°o Payment record
        const newPayment = new Payment({
            bookingId: savedBooking._id,
            orderId,
            amount: total
        });

        await newPayment.save();

        // G·ªçi service ƒë·ªÉ t·∫°o URL thanh to√°n
        const paymentUrl = await vnPayService.createPaymentUrl({ orderId, amount: total });

        return { status: 201, data: { message: "Vui l√≤ng thanh to√°n!", paymentUrl, bookingId: savedBooking._id } };
    } catch (error) {
        console.error("üî• L·ªói khi ƒë·∫∑t tour:", error.message);
        return { status: 500, data: { error: "L·ªói server khi ƒë·∫∑t tour!" } };
    }
};


exports.cancelBooking = async (bookingId, userId) => {
    try {
        const booking = await Booking.findOne({ _id: bookingId, userId });

        if (!booking) {
            throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t tour!");
        }

        if (booking.status !== "Pending") {
            throw new Error("Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n ƒëang ch·ªù x·ª≠ l√Ω!");
        }

        booking.status = "Cancelled"; // ƒê√°nh d·∫•u ƒë∆°n ƒë√£ b·ªã h·ªßy
        await booking.save();

        return { success: true, message: "H·ªßy ƒë∆°n ƒë·∫∑t tour th√†nh c√¥ng!" };
    } catch (error) {
        throw new Error(error.message);
    }
};
// Th√™m h√†m t√≠nh t·ªïng total theo th√°ng (ch·ªâ t√≠nh status: "Paid")
exports.getMonthlyTotal = async (year) => {
    try {
        // S·ª≠ d·ª•ng aggregation pipeline ƒë·ªÉ nh√≥m theo th√°ng v√† t√≠nh t·ªïng
        const monthlyData = await Booking.aggregate([
            {
                // L·ªçc c√°c booking trong nƒÉm ƒë∆∞·ª£c ch·ªçn v√† c√≥ status "Paid"
                $match: {
                    bookingDate: {
                        $gte: new Date(year, 0, 1), // Ng√†y ƒë·∫ßu ti√™n c·ªßa nƒÉm
                        $lte: new Date(year, 11, 31) // Ng√†y cu·ªëi c√πng c·ªßa nƒÉm
                    },
                    status: "Paid" // Ch·ªâ l·∫•y booking ƒë√£ thanh to√°n
                }
            },
            {
                // Nh√≥m theo th√°ng
                $group: {
                    _id: { $month: "$bookingDate" }, // L·∫•y th√°ng t·ª´ bookingDate
                    totalAmount: { $sum: "$total" } // T√≠nh t·ªïng total
                }
            },
            {
                // S·∫Øp x·∫øp theo th√°ng
                $sort: { "_id": 1 }
            }
        ]);

        // T·∫°o m·∫£ng 12 th√°ng v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 0
        const monthlyTotals = Array(12).fill(0);
        
        // ƒêi·ªÅn d·ªØ li·ªáu t·ªïng v√†o c√°c th√°ng t∆∞∆°ng ·ª©ng
        monthlyData.forEach(item => {
            monthlyTotals[item._id - 1] = item.totalAmount; // item._id l√† th√°ng (1-12), chuy·ªÉn v·ªÅ index (0-11)
        });

        return { 
            status: 200, 
            data: { 
                message: "L·∫•y t·ªïng doanh thu theo th√°ng th√†nh c√¥ng!", 
                year: year, 
                monthlyTotals: monthlyTotals 
            } 
        };
    } catch (error) {
        return { status: 500, data: { error: "L·ªói khi t√≠nh t·ªïng doanh thu theo th√°ng!" } };
    }
};