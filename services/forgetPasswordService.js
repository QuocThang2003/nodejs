const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const User = require("../models/user");
const { JWT_SECRET } = require("../config/env");
const { sendResetPasswordEmail } = require("./emailService");

const forgotPassword = async (email) => {
    const user = await User.findOne({ email });
    if (!user) throw new Error("Email kh√¥ng t·ªìn t·∫°i");

    const token = jwt.sign({ id: user._id }, JWT_SECRET, { expiresIn: "15m" });
    await sendResetPasswordEmail(email, token);

    return { 
        message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.", 
        token // ‚úÖ Tr·∫£ v·ªÅ token trong response
    };
};

const resetPassword = async (token, password, confirmPassword) => {
    console.log("üì¢ Token nh·∫≠n ƒë∆∞·ª£c:", token); // ‚úÖ Debug token

    if (!token) {
        console.log("‚ùå L·ªói: Token kh√¥ng t·ªìn t·∫°i");
        throw new Error("Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p");
    }

    if (password !== confirmPassword) throw new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");

    let decoded;
    try {
        decoded = jwt.verify(token, JWT_SECRET);
        console.log("‚úÖ Token h·ª£p l·ªá:", decoded);
    } catch (error) {
        console.log("‚ùå Token kh√¥ng h·ª£p l·ªá:", error.message);
        throw new Error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    await User.findByIdAndUpdate(decoded.id, { password: hashedPassword });

    return { message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng." };
};


module.exports = { forgotPassword, resetPassword };
