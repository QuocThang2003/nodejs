const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/user");
const { JWT_SECRET } = require("../config/env");
const { sendConfirmationEmail } = require("./emailService");

// H√†m ƒëƒÉng k√Ω
const registerUser = async (fullName, phone, email, password, confirmPassword, address) => {
    // 1. Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc c√≥ b·ªã thi·∫øu kh√¥ng
    if (!fullName || !phone || !email || !password || !confirmPassword || !address) {
        throw new Error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng!");
    }

    // 2. Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        throw new Error("Email kh√¥ng h·ª£p l·ªá!");
    }

    // 3. Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n c√≥ kh·ªõp kh√¥ng
    if (password !== confirmPassword) {
        throw new Error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
    }

    // 4. Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u (v√≠ d·ª•: t·ªëi thi·ªÉu 6 k√Ω t·ª±)
    if (password.length < 6) {
        throw new Error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
    }

    // 5. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
        throw new Error("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
    }

    // 6. Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ h·ª£p l·ªá kh√¥ng (v√≠ d·ª•: 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0)
    const phoneRegex = /^0\d{9}$/;
    if (!phoneRegex.test(phone)) {
        throw new Error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Ph·∫£i l√† 10 s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0.");
    }

    // 7. L·ªói khi hash m·∫≠t kh·∫©u th·∫•t b·∫°i (hi·∫øm, nh∆∞ng c√≥ th·ªÉ x·∫£y ra)
    let hashedPassword;
    try {
        hashedPassword = await bcrypt.hash(password, 10);
    } catch (error) {
        throw new Error("C√≥ l·ªói x·∫£y ra khi m√£ h√≥a m·∫≠t kh·∫©u!");
    }

    const newUser = new User({ fullName, phone, email, password: hashedPassword, address });
    await newUser.save();

    console.log("‚úÖ User ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB:", newUser);

    await sendConfirmationEmail(email, fullName);

    return { 
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.",
        email: email 
    };
};

// H√†m ƒëƒÉng nh·∫≠p
const loginUser = async (email, password) => {
    console.log("üì¢ ƒêang ƒëƒÉng nh·∫≠p v·ªõi email:", email);

    // 1. Ki·ªÉm tra email v√† password c√≥ ƒë∆∞·ª£c cung c·∫•p kh√¥ng
    if (!email || !password) {
        throw new Error("Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!");
    }

    // 2. Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        throw new Error("Email kh√¥ng h·ª£p l·ªá!");
    }

    // 3. Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
    if (password.length < 6) {
        throw new Error("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
    }

    // 4. Ki·ªÉm tra email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng (g·ªôp email kh√¥ng t·ªìn t·∫°i v√† m·∫≠t kh·∫©u kh√¥ng kh·ªõp)
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        console.log("‚ùå Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
        throw new Error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
    }

    // T·∫°o token
    const token = jwt.sign(
        { id: user._id, fullName: user.fullName, address: user.address, phone: user.phone }, 
        JWT_SECRET, 
        { expiresIn: "1h" }
    );

    console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Token: ${token}`);

    // Tr·∫£ v·ªÅ th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    return { 
        message: `ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Xin ch√†o, ${user.fullName}`, 
        token,
        user: { 
            fullName: user.fullName, 
            address: user.address, 
            phone: user.phone 
        }
    };
};


// H√†m ƒëƒÉng xu·∫•t
const logoutUser = async () => {
    return { message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" };
};

module.exports = { registerUser, loginUser, logoutUser };