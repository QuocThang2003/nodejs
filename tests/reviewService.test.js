// exports.createReview (service logic)
exports.createReview = async (userId, tourId, bookingId, rating, reviewText) => {
  try {
      // In ra ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n t·ª´ client
      console.log("üìå Booking ID nh·∫≠n t·ª´ client:", bookingId);
      console.log("üìå User ID nh·∫≠n t·ª´ client:", userId);
      console.log("üìå Tour ID nh·∫≠n t·ª´ client:", tourId);

      // Ki·ªÉm tra xem booking c√≥ t·ªìn t·∫°i kh√¥ng
      const booking = await Booking.findOne({ _id: bookingId, userId, tourId, status: "Paid" });

      if (!booking) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y booking h·ª£p l·ªá trong DB:", { bookingId, userId, tourId });
          return { status: 400, data: { error: "B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi thanh to√°n!" } };
      }

      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë√°nh gi√° tour n√†y ch∆∞a
      const existingReview = await Review.findOne({ userId, tourId });
      if (existingReview) {
          return { status: 400, data: { error: "B·∫°n ƒë√£ ƒë√°nh gi√° tour n√†y r·ªìi!" } };
      }

      // T·∫°o ƒë√°nh gi√° m·ªõi
      const newReview = new Review({ userId, tourId, bookingId, rating, reviewText });
      await newReview.save();

      console.log("‚úÖ ƒê√°nh gi√° th√†nh c√¥ng:", newReview);
      return { status: 201, data: { message: "ƒê√°nh gi√° th√†nh c√¥ng!", review: newReview } };
  } catch (error) {
      console.error("üî• L·ªói trong service:", error); // Log l·ªói chi ti·∫øt
      return { status: 500, data: { error: "L·ªói server khi t·∫°o review!", details: error.message } };
  }
};

// Test file
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const ReviewService = require("../services/reviewService");
const Booking = require("../models/Booking");
const Review = require("../models/review");

jest.mock("../models/Booking");
jest.mock("../models/review");

describe("ReviewService - createReview", () => {
let mongoServer;

// Chu·∫©n b·ªã tr∆∞·ªõc khi ch·∫°y t·∫•t c·∫£ test
beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  await mongoose.connect(mongoServer.getUri(), {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
});

// D·ªçn d·∫πp sau khi ch·∫°y xong t·∫•t c·∫£ test
afterAll(async () => {
  await mongoose.connection.close();
  await mongoServer.stop();
});

// X√≥a mock tr∆∞·ªõc m·ªói test ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng l·∫´n nhau
beforeEach(() => {
  jest.clearAllMocks();
});

// Test 1: T·∫°o ƒë√°nh gi√° th√†nh c√¥ng v·ªõi d·ªØ li·ªáu h·ª£p l·ªá
it("n√™n t·∫°o ƒë√°nh gi√° th√†nh c√¥ng v·ªõi d·ªØ li·ªáu h·ª£p l·ªá", async () => {
  Booking.findOne.mockResolvedValue({ _id: "booking789", userId: "user123", tourId: "tour456", status: "Paid" });
  Review.findOne.mockResolvedValue(null);
  const mockReview = { userId: "user123", tourId: "tour456", bookingId: "booking789", rating: 5, reviewText: "Tuy·ªát v·ªùi!", save: jest.fn().mockResolvedValue(true) };
  Review.mockImplementation(() => mockReview);

  const result = await ReviewService.createReview("user123", "tour456", "booking789", 5, "Tuy·ªát v·ªùi!");
  expect(result.status).toBe(201);
  expect(result.data.message).toBe("ƒê√°nh gi√° th√†nh c√¥ng!");
});

// Test 2: Th·∫•t b·∫°i khi booking kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a thanh to√°n
it("n√™n th·∫•t b·∫°i khi booking kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a thanh to√°n", async () => {
  Booking.findOne.mockResolvedValue(null);
  const result = await ReviewService.createReview("user123", "tour456", "booking999", 4, "T·ªët");
  expect(result.status).toBe(400);
  expect(result.data.error).toBe("B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi thanh to√°n!");
});

// Test 3: Th·∫•t b·∫°i khi ng∆∞·ªùi d√πng ƒë√£ ƒë√°nh gi√° tour n√†y r·ªìi
it("n√™n th·∫•t b·∫°i khi ng∆∞·ªùi d√πng ƒë√£ ƒë√°nh gi√° tour n√†y r·ªìi", async () => {
  Booking.findOne.mockResolvedValue({ _id: "booking789", userId: "user123", tourId: "tour456", status: "Paid" });
  Review.findOne.mockResolvedValue({ _id: "review123" });
  const result = await ReviewService.createReview("user123", "tour456", "booking789", 3, "B√¨nh th∆∞·ªùng");
  expect(result.status).toBe(400);
  expect(result.data.error).toBe("B·∫°n ƒë√£ ƒë√°nh gi√° tour n√†y r·ªìi!");
});

// Test 4: Th·∫•t b·∫°i khi l∆∞u ƒë√°nh gi√° b·ªã l·ªói
it("n√™n th·∫•t b·∫°i khi l∆∞u ƒë√°nh gi√° b·ªã l·ªói", async () => {
  Booking.findOne.mockResolvedValue({ _id: "booking789", userId: "user123", tourId: "tour456", status: "Paid" });
  Review.findOne.mockResolvedValue(null);
  Review.mockImplementation(() => ({ save: jest.fn().mockRejectedValue(new Error("L·ªói l∆∞u database")) }));
  const result = await ReviewService.createReview("user123", "tour456", "booking789", 5, "R·∫•t t·ªët");
  expect(result.status).toBe(500);
  expect(result.data.error).toBe("L·ªói server khi t·∫°o review!");
});

// Test 5: Th·∫•t b·∫°i khi ki·ªÉm tra booking b·ªã l·ªói
it("n√™n th·∫•t b·∫°i khi ki·ªÉm tra booking b·ªã l·ªói", async () => {
  Booking.findOne.mockRejectedValue(new Error("L·ªói truy v·∫•n database"));
  const result = await ReviewService.createReview("user123", "tour456", "booking789", 4, "Kh√° ·ªïn");
  expect(result.status).toBe(500);
  expect(result.data.error).toBe("L·ªói server khi t·∫°o review!");
});

// Test 6: Th·∫•t b·∫°i khi d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë·∫ßy ƒë·ªß (thi·∫øu rating ho·∫∑c reviewText)
it("n√™n th·∫•t b·∫°i khi d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë·∫ßy ƒë·ªß", async () => {
  Booking.findOne.mockResolvedValue({ _id: "booking789", userId: "user123", tourId: "tour456", status: "Paid" });
  Review.findOne.mockResolvedValue(null);

  // Gi·∫£ l·∫≠p tr∆∞·ªùng h·ª£p thi·∫øu rating
  const result = await ReviewService.createReview("user123", "tour456", "booking789", undefined, "Tuy·ªát v·ªùi!");

  expect(result.status).toBe(500); // C√≥ th·ªÉ thay b·∫±ng 400 n·∫øu th√™m validation
  expect(result.data.error).toBe("L·ªói server khi t·∫°o review!");
});

// Test 7: Th·∫•t b·∫°i khi tourId ho·∫∑c userId kh√¥ng kh·ªõp v·ªõi booking
it("n√™n th·∫•t b·∫°i khi tourId ho·∫∑c userId kh√¥ng kh·ªõp v·ªõi booking", async () => {
  // Booking tr·∫£ v·ªÅ kh√¥ng kh·ªõp v·ªõi tourId ho·∫∑c userId ƒë∆∞·ª£c cung c·∫•p
  Booking.findOne.mockResolvedValue(null);

  const result = await ReviewService.createReview("user123", "tour456", "booking789", 5, "Tuy·ªát v·ªùi!");

  expect(result.status).toBe(400);
  expect(result.data.error).toBe("B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° sau khi thanh to√°n!");
});
});