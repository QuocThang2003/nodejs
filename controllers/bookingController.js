const bookingService = require("../services/bookingService");
const { sendPaymentNotificationEmail } = require("../services/emailService");
const Payment = require("../models/payment");
const Booking = require("../models/Booking");
exports.getAllBookings = async (_req, res) => {
    try {
        const response = await bookingService.getAllBookings();
        res.status(response.status).json(response.data);
    } catch (error) {
        console.error("üî• L·ªói l·∫•y danh s√°ch ƒë·∫∑t tour:", error.message);
        res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch ƒë·∫∑t tour!" });
    }
};

exports.getBookingById = async (req, res) => {
    try {
        const bookingId = req.params.id;
        const response = await bookingService.getBookingById(bookingId);
        res.status(response.status).json(response.data);
    } catch (error) {
        console.error("üî• L·ªói l·∫•y ƒë∆°n ƒë·∫∑t tour:", error.message);
        res.status(500).json({ error: "L·ªói server khi l·∫•y ƒë∆°n ƒë·∫∑t tour!" });
    }
};

exports.createBooking = async (req, res) => {
    try {
        const { tourId, quantity } = req.body;
        const userId = req.user?.id;
        if (!userId) return res.status(401).json({ error: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t tour!" });

        const response = await bookingService.createBooking(userId, tourId, quantity);
        res.status(response.status).json(response.data);
    } catch (error) {
        console.error("üî• L·ªói ƒë·∫∑t tour:", error.message);
        res.status(500).json({ error: "L·ªói server khi ƒë·∫∑t tour!" });
    }
};

exports.paymentCallback = async (req, res) => {
    try {
        const { vnp_TxnRef, vnp_ResponseCode } = req.query;

        if (!vnp_TxnRef) {
            return res.status(400).json({ error: "Thi·∫øu orderId!" });
        }

        const payment = await Payment.findOne({ orderId: vnp_TxnRef }).populate("bookingId");

        if (!payment) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thanh to√°n!" });
        }

        const booking = await Booking.findById(payment.bookingId).populate("userId");

        if (!booking) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ch·ªó!" });
        }

        if (vnp_ResponseCode === "00") {
            payment.status = "Paid";
            await payment.save();
            booking.status = "Paid";
            await booking.save();

            // G·ª≠i email th√¥ng b√°o thanh to√°n th√†nh c√¥ng
            await sendPaymentNotificationEmail(booking.userId.email, booking._id, booking.bookingDate, booking.total, "Paid");

            return res.redirect(`http://localhost:3000/booking-success?bookingId=${booking._id}`);
        } else {
            payment.status = "Pending";
            await payment.save();

            // G·ª≠i email th√¥ng b√°o thanh to√°n th·∫•t b·∫°i
            await sendPaymentNotificationEmail(booking.userId.email, booking._id, booking.bookingDate, booking.total, "Pending");

            return res.redirect("http://localhost:3000/booking-failure");
        }
    } catch (error) {
        console.error("üî• L·ªói x·ª≠ l√Ω thanh to√°n:", error.message);
        res.status(500).json({ error: "L·ªói server khi x·ª≠ l√Ω thanh to√°n!" });
    }
};

exports.cancelBooking = async (req, res) => {
    try {
        const bookingId = req.params.id;
        const userId = req.user?.id;

        if (!userId) {
            return res.status(401).json({ message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ h·ªßy ƒë∆°n ƒë·∫∑t tour." });
        }

        const result = await bookingService.cancelBooking(bookingId, userId);
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server: " + error.message });
    }
};
exports.getMonthlyTotal = async (req, res) => {
    try {
        const year = req.query.year ? parseInt(req.query.year) : new Date().getFullYear();
        const response = await bookingService.getMonthlyTotal(year); // G·ªçi service
        res.status(response.status).json(response.data); // Tr·∫£ v·ªÅ response.data
    } catch (error) {
        console.error("üî• L·ªói t√≠nh t·ªïng theo th√°ng:", error.message);
        res.status(500).json({ error: "L·ªói server khi t√≠nh t·ªïng theo th√°ng!" });
    }
};
