const reviewService = require("../services/reviewService");

exports.getAllReviews = async (req, res) => {
    try {
        const { tourId } = req.query; // L·∫•y tourId t·ª´ query params
        const reviews = await reviewService.getAllReviews(tourId);

        if (reviews.message) {
            // N·∫øu c√≥ th√¥ng b√°o (kh√¥ng c√≥ ƒë√°nh gi√°)
            return res.status(200).json({ message: reviews.message });
        }

        res.status(200).json(reviews); // N·∫øu c√≥ ƒë√°nh gi√°, tr·∫£ v·ªÅ danh s√°ch
    } catch (error) {
        console.error("üî• L·ªói l·∫•y danh s√°ch ƒë√°nh gi√°:", error.message);
        res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch ƒë√°nh gi√°!" });
    }
};



exports.createReview = async (req, res) => {
    try {
        const { bookingId, rating, reviewText } = req.body;
        const { tourId } = req.params; // L·∫•y tourId t·ª´ params
        const userId = req.user?.id; // L·∫•y userId t·ª´ session

        if (!userId) {
            return res.status(401).json({ error: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!" });
        }

        // Ki·ªÉm tra xem tourId c√≥ t·ªìn t·∫°i kh√¥ng
        if (!tourId) {
            return res.status(400).json({ error: "Thi·∫øu tourId!" });
        }

        // Ki·ªÉm tra xem bookingId c√≥ t·ªìn t·∫°i kh√¥ng
        if (!bookingId) {
            return res.status(400).json({ error: "Thi·∫øu bookingId!" });
        }

        // G·ªçi service ƒë·ªÉ t·∫°o review
        const response = await reviewService.createReview(userId, tourId, bookingId, rating, reviewText);
        res.status(response.status).json(response.data);
    } catch (error) {
        console.error("üî• L·ªói ƒë√°nh gi√°:", error); // In to√†n b·ªô l·ªói
        res.status(500).json({ error: "L·ªói server khi ƒë√°nh gi√° tour!", details: error.message });
    }
};


// ‚ö° API t√≠nh rating trung b√¨nh
exports.getAverageRating = async (req, res) => {
    try {
        const { tourId } = req.params;
        const ratingData = await reviewService.getAverageRating(tourId);
        res.status(200).json(ratingData);
    } catch (error) {
        res.status(500).json({ error: "L·ªói server khi t√≠nh rating trung b√¨nh!" });
    }
};